#!/bin/bash

set -e -x

function is_jruby() {
  if ruby -e 'exit RUBY_PLATFORM == "java"'; then
    return 0
  else
    return 1
  fi
}

# idea taken from: http://blog.headius.com/2010/03/jruby-startup-time-tips.html
export JRUBY_OPTS='-X-C' # disable JIT since these processes are so short lived

# force jRuby to use client mode JVM or a compilation mode thats as close as possible,
# idea taken from https://github.com/jruby/jruby/wiki/Improving-startup-time
export JAVA_OPTS='-client -XX:+TieredCompilation -XX:TieredStopAtLevel=1'

echo "Running all..."
bin/rspec spec -b --format progress --profile

echo
echo "--------------------------------------------------------------------"
echo

if is_jruby; then
  echo "Skipping one-by-one spec runs due to expensive JVM load time"
else
  for file in `find spec -iname '*_spec.rb'`; do
    NO_COVERALLS=1 bin/rspec $file -b --format progress
  done
fi

# Prepare RUBYOPT for scenarios that are shelling out to ruby,
# and PATH for those that are using `rspec` or `rake`.
# RUBYOPT="-I${PWD}/bundle -rbundler/setup" \
#   PATH="${PWD}/bin:$PATH" \
#   bin/cucumber

# For now, use this instead, due to a bug in bundler:
# https://github.com/carlhuda/bundler/issues/2382
bundle exec bin/cucumber --strict

#Test against other RSpec gems.
rm -rf /tmp/rspec-ci
mkdir /tmp/rspec-ci

cp -r . /tmp/rspec-ci/rspec-core

cd /tmp/rspec-ci
pwd

git clone --depth 1 https://github.com/rspec/rspec-mocks
git clone --depth 1 https://github.com/rspec/rspec-expectations
git clone --depth 1 https://github.com/rspec/rspec-rails

cd rspec-mocks
pwd
bundle install
bundle exec rspec

cd ../rspec-expectations
pwd
bundle install
bundle exec rspec

cd ../rspec-rails
pwd
gem install thor
bundle install
thor version:use 3.2.13
bundle exec rake spec
